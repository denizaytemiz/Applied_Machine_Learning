# -*- coding: utf-8 -*-
"""LinReg&Tree&LogReg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kBpDxjqk0GIwjNFtnBbsqofjIuEVw7aN
"""

import pandas

filename = "normalized_2.xlsx"

df = pandas.read_excel(filename, index_col=0)  # read an Excel spreadsheet

# shift by specified # days and join to original dataframe
#deniz changed num_days to 0 here
num_days = 0
df1 = 0
dfout = df
for n in range(1,num_days+1):
    df1 = df.shift(periods = n).add_suffix(str(n))
    dfout = dfout.join(df1)
    df1 = 0

# drop rows that now have NA values
dfout.drop(dfout.index[range(num_days)], axis=0, inplace=True)

# create target column
t = 28 # number days ahead to predict
dfout['Target'] = dfout['Close'].shift(periods = -t)
dfout.reset_index(inplace=True)
dfout.drop(['index'], axis=1, inplace=True)

# again drop rows that now have NA values
dfout.drop(dfout.index[range(-1,(-t-1),-1)], axis=0, inplace=True)
#print(dfout)

dfout.to_excel("shifted_new.xlsx")

#linear regression and decision tree regressor models will be created in the following

#df_lin holds the dataset we will work on
df_lin=pandas.read_excel('shifted_new.xlsx')

#checking for any NaN at the end
df_lin.tail(20)

# few arrangements on the dataset
df_lin.set_index('Date', inplace=True)

df_lin = df_lin.drop(['Unnamed: 0'],1)

df_lin

df_lin.shape

# visualizing the dataset in terms of days and closing prices
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
# visualizing closing prices for each day in dataset
plt.figure(figsize=(16,8))
plt.title('stock market')
plt.xlabel('Days')
plt.ylabel('Close Price')
plt.plot(df_lin['Close'])
plt.show()

#creating the feauture set and target set
X = np.array(df_lin.drop(['Target'],1))
y = np.array(df_lin['Target'])

X

#split data to train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

#lr is the linear regression model
lr = LinearRegression().fit(X_train,y_train)

#evaluate linear regressions performnace
predictions = lr.predict(X_test)
print(np.sqrt(metrics.mean_squared_error(y_test,predictions)))

#creating this dataframe so that it will be useful for graph creation in the following part
df1 = pandas.DataFrame({"predictions": predictions, "actual": y_test})
df1

#comparing actual values with estimated ones by help of a graph
plt.figure(figsize=(16,8))
plt.title('compare for linear regression')
plt.xlabel('days')
plt.ylabel('close price')

plt.plot(df1[['predictions', 'actual']])
plt.legend(['pred','actual'])
plt.show()

#decision tree model
from sklearn.tree import DecisionTreeRegressor

#split data to train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

tree = DecisionTreeRegressor().fit(X_train, y_train)

prediction_tree = tree.predict(X_test)

df2 = pandas.DataFrame({"predictions": prediction_tree, "actual": y_test})
df2

#comparing actual values with estimated ones by help of a graph
plt.figure(figsize=(16,8))
plt.title('compare for decision tree')
plt.xlabel('days')
plt.ylabel('close price')

plt.plot(df2[['predictions', 'actual']])
plt.legend(['pred','actual'])
plt.show()

df_lin

#trying out logistic regression model for the next part
from sklearn.linear_model import LogisticRegression
#since logistic regression does classiication, target value will be either 0 or 1.
df_lin["Target"] = np.where(df_lin["Target"] < 0.5, 0, 1)

#split data to train and test
#creating the feauture set and target set
X = np.array(df_lin.drop(['Target'],1))
y = np.array(df_lin['Target'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

logreg = LogisticRegression()
logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

df3 = pandas.DataFrame({"predictions": y_pred, "actual": y_test})
df3

#comparing actual values with estimated ones by help of a graph
plt.figure(figsize=(16,8))
plt.title('compare for logistic regression')
plt.xlabel('days')
plt.ylabel('close price')

plt.plot(df3[['predictions', 'actual']])
plt.legend(['pred','actual'])
plt.show()

